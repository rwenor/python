# This file is generated by make-python-nftp.lisp
# -*- coding: latin-1 -*-

import sys

if sys.version_info.major < 3:
   _PY2_ = True
else:
   _PY2_ = False

nftp_class_patterns = {
     1 : [["nftpsequence", 0], # Quotes
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["board", 5],
          ["time", 6],
          ["paper", 7],
          ["bid", "b"],
          ["bid-depth", "bd"],
          ["bid-depth-total", "bdt"],
          ["bid-number", "nb"],
          ["offer", "o"],
          ["offer-depth", "od"],
          ["offer-depth-total", "odt"],
          ["offer-number", "no"],
          ["open", "open"],
          ["high", "hi"],
          ["low", "lo"],
          ["last", "l"],
          ["change", "c"],
          ["change-percent", "cp"],
          ["volume", "vo"],
          ["value", "va"],
          ["trades", "nt"],
          ["status", "st"],
          ["quote-id", "i"]],
     3 : [["nftpsequence", 0], # Trade
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["board", 5],
          ["time", 6],
          ["paper", 7],
          ["trade-time", 8],
          ["quantity", 9],
          ["price", 10],
          ["source", 11],
          ["buyer", 12],
          ["seller", 13],
          ["change-since-last", 14],
          ["initiator", 15]],
     6 : [["nftpsequence", 0], # Extended_spread
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["time", 5],
          ["paper", 6],
          ["bid", 7],
          ["bid-depth", 8],
          ["bid-depth-total", 9],
          ["offer", 10],
          ["offer-depth", 11],
          ["offer-depth-total", 12],
          ["indexp", 13]],
    20 : [["nftpsequence", 0], # Security
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["time", 5],
          ["paper", 6],
          ["name", 7],
          ["isin", 8],
          ["lot", 9],
          ["last-trade-date", 10],
          ["prev-price", 11],
          ["tradeable-size", 12],
          ["currency", 13],
          ["sectype", 14],
          ["sector", 15],
          ["primary-paper", 16],
          ["primary-exchange", 17],
          ["value-factor", 18],
          ["status", 19]],
    22 : [["nftpsequence", 0], # Market_by_price
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["board", 5],
          ["time", 6],
          ["paper", 7],
          ["bids", 8],
          ["offers", 9]],
    24 : [["nftpsequence", 0], # Exchange
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["name", 5],
          ["open-time", 6],
          ["close-time", 7],
          ["pretrade-time", 8],
          ["posttrade-time", 9],
          ["offset-from-oslo", 10],
          ["allow-order-change", 11],
          ["area", 12],
          ["max-valid", 13],
          ["max-valid-stop", 14],
          ["next-trade-days", 15],
          ["allow-stop-loss", 16],
          ["allow-hidden", 17],
          ["allow-direct-routing", 18]],
    25 : [["nftpsequence", 0], # Release
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["distributor", 4],
          ["time", 5],
          ["papers", "p"],
          ["exchanges", "e"],
          ["release-type", "ty"],
          ["topic", "to"],
          ["id", "i"],
          ["received-time", "rt"],
          ["published-time", "pt"],
          ["company-name", "cn"],
          ["country", "c"],
          ["city", "ci"],
          ["isin", "is"],
          ["external-urls", "eu"],
          ["company-url", "cu"],
          ["heading", "h"],
          ["ingress", "in"],
          ["body", "b"],
          ["footer", "f"],
          ["copyright", "co"],
          ["category", "ca"],
          ["format", "fm"],
          ["language", "la"]],
    27 : [["nftpsequence", 0], # History
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["date", 5],
          ["paper", 6],
          ["open", 7],
          ["high", 8],
          ["low", 9],
          ["close", 10],
          ["volume", 11],
          ["value", 12]],
    30 : [["nftpsequence", 0], # Authorized
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["yes-or-no", 3],
          ["text", 4],
          ["realtime", 5],
          ["level", 6],
          ["login-id", 7]],
    48 : [["nftpsequence", 0], # Exchange_state
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["time", 5],
          ["date", 6],
          ["state", 7]],
    53 : [["nftpsequence", 0], # Customer_order
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["do-odd-lotp", 4],
          ["id", 5],
          ["paper", 6],
          ["order-type", 7],
          ["order-number", 8],
          ["order-limit", 9],
          ["action-status", 10],
          ["customer", 11],
          ["filled-number", 12],
          ["trigger-price", 13],
          ["directp", 14],
          ["status", 15],
          ["hidden-number", 16],
          ["exchange", 17],
          ["order-time", 18],
          ["valid-until", 19],
          ["current-part", 20],
          ["order-method", 21],
          ["entered-by", 22],
          ["exec-paper", 23],
          ["exec-exchange", 24]],
    54 : [["nftpsequence", 0], # Customer_deal
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["deal-id", 4],
          ["id", 5],
          ["part", 6],
          ["deal-number", 7],
          ["deal-price", 8],
          ["entry-time", 9],
          ["notifiedp", 10],
          ["customer", 11],
          ["order-type", 12],
          ["paper", 13],
          ["exchange", 14]],
    62 : [["nftpsequence", 0], # Trader_available
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["customer", 4],
          ["update_time", 5],
          ["money", 6],
          ["long_pos_value", 7],
          ["short_pos_value", 8],
          ["required_funds", 9],
          ["net_available", 10],
          ["active_buy_value", 11]],
    70 : [["nftpsequence", 0], # User_message
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["message-type", 3],
          ["message", 4]],
    82 : [["nftpsequence", 0], # Extended_paper_summary
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["paper", 3],
          ["last", 4],
          ["change-percent", 5],
          ["value", 6],
          ["name", 7],
          ["displayed-precision", 8],
          ["bid", 9],
          ["offer", 10]],
    91 : [["nftpsequence", 0], # Index_weight
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["time", 5],
          ["paper", 6],
          ["index-paper", 7],
          ["index-exchange", 8],
          ["weight", 9],
          ["multiplier", 10],
          ["price-adjustment", 11]],
    99 : [["nftpsequence", 0], # Errmsg
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["err-class", 3],
          ["err-text", 4]],
   120 : [["nftpsequence", 0], # Extended_security
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["time", 5],
          ["paper", 6],
          ["name", 7],
          ["isin", 8],
          ["lot", 9],
          ["last-trade-date", 10],
          ["prev-price", 11],
          ["tradeable-size", 12],
          ["currency", 13],
          ["sectype", 14],
          ["sector", 15],
          ["existsp", 16],
          ["tradeablep", 17],
          ["primary-paper", 18],
          ["primary-exchange", 19],
          ["secondaries", 20],
          ["value-factor", 21],
          ["url", 22],
          ["issuer", 23],
          ["expiration-date", 24],
          ["status", 25],
          ["min-trade-value", 26],
          ["last-update-date", 27]],
   126 : [["nftpsequence", 0], # Fund
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["paper", 5],
          ["fund-manager-id", "fid"],
          ["fund-manager-name", "fna"],
          ["root-group", "rg"],
          ["fund-type", "ft"],
          ["fund-area", "fa"],
          ["benchmark", "b"],
          ["max-sales-charge", "msc"],
          ["max-redemption-fee", "mrf"],
          ["management-fee", "mf"],
          ["min-amount", "ma"],
          ["min-amount-currency", "mac"],
          ["vff-classified-p", "vff"],
          ["credit-risk-p", "cre"],
          ["currency-risk-p", "cru"],
          ["max-interest-rate-risk", "air"],
          ["min-interest-rate-risk", "iir"],
          ["yield", "y"],
          ["modified-duration", "md"],
          ["profit-share-p", "ps"],
          ["total-cost-percent-unshared", "tcpu"],
          ["total-cost-percent-shared", "tcps"],
          ["total-cost-date", "tcd"],
          ["returns", "r"],
          ["return-years", "ry"],
          ["average-returns", "avr"],
          ["annualized-returns", "anr"],
          ["volatilities", "v"],
          ["sharpe-ratios", "sr"],
          ["differential-returns", "dr"],
          ["relative-volatilities", "rv"],
          ["information-ratios", "ir"]],
   131 : [["nftpsequence", 0], # Extended_available
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["customer", 4],
          ["active-buys", "ab"],
          ["active-buy-value", "abv"],
          ["allow-stop-loss", "asl"],
          ["active-sells", "as"],
          ["borrowed", "b"],
          ["counting-active-buy-value", "cabv"],
          ["cust-curr", "cc"],
          ["curr-rate", "cr"],
          ["concentration-rf", "crf"],
          ["done-buys", "db"],
          ["done-buy-value", "dbv"],
          ["done-sells", "ds"],
          ["done-sell-value", "dsv"],
          ["exch-name", "en"],
          ["full-name", "fn"],
          ["futures-realized", "fr"],
          ["futures-value", "fv"],
          ["intraday-credit", "ic"],
          ["in-portfolio", "ip"],
          ["limit", "l"],
          ["lent", "len"],
          ["locked", "lkd"],
          ["lk-money", "lkm"],
          ["lot", "lot"],
          ["long-pos-value", "lpv"],
          ["money", "m"],
          ["max-buy", "mb"],
          ["max-buy-credit-val", "mbcv"],
          ["max-buy-lot", "mbl"],
          ["max-buy-val", "mbv"],
          ["max-credit", "mc"],
          ["min-invisible", "mi"],
          ["max-sell", "ms"],
          ["max-sell-long", "msl"],
          ["max-sell-short", "mss"],
          ["needs-available", "na"],
          ["net-available", "net"],
          ["paper-currency", "pc"],
          ["paper-factor", "pf"],
          ["prev-share-value", "psv"],
          ["required-funds", "rf"],
          ["rf-factor", "rff"],
          ["req-funds-%", "rfp"],
          ["paper", "p"],
          ["exchange", "e"],
          ["sum-futures-realized", "sfr"],
          ["sec-name", "sn"],
          ["short-pos-value", "spv"],
          ["total-share-value", "tsv"],
          ["time", "t"],
          ["user-type", "ut"]],
   135 : [["nftpsequence", 0], # Heartbeat
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["date", 4],
          ["time", 5],
          ["message", 6]],
   146 : [["nftpsequence", 0], # Trade_information
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["sequence", 3],
          ["exchange", 4],
          ["board", 5],
          ["time", 6],
          ["paper", 7],
          ["trade-time", 8],
          ["quantity", 9],
          ["price", 10],
          ["buyer", 11],
          ["seller", 12]],
   193 : [["nftpsequence", 0], # Api_response
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["id", 3]],
   194 : [["nftpsequence", 0], # Api_order_entry
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["odd-lot-id", 3]],
   195 : [["nftpsequence", 0], # Api_order_change
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["status", 3],
          ["partial", 4],
          ["remaining", 5],
          ["done", 6],
          ["limit", 7],
          ["volume", 8]],
   311 : [["nftpsequence", 0], # Pool_content
          ["nftpmetadata", 1],
          ["nftpclassid", 2],
          ["exchange", 3],
          ["paper", 4],
          ["quantity", 5]]}

class NFTPGenericClass:
   def __init__(self, nftplist, classid):
      self._nftp = self.parseNFTP(nftplist, nftp_class_patterns[classid])
      self.nftpsequence = self._nftp.get('nftpsequence')
      self.nftpmetadata = self._nftp.get('nftpmetadata')
      self.nftpclassid  = self._nftp.get('nftpclassid')

   def __str__(self):
      res = '<' + type(self).__name__
      for key in sorted(self.__dict__):
         if key[0] != '_':
            val = self.__dict__.get(key)
            if isinstance(val, str):
               val = "'" + val + "'"
            else:
               val = str(val)
            res += ' ' + key + '=' + val
      res += '>'
      return res

   def parseNFTP(self, nftplist, patterns):
      nftp      = {}
      kv_index  = 0
      kvt       = False
      listlen   = len(nftplist)
      for slot, accessor in patterns:
         if isinstance(accessor, int): 
            # The positional fields always come first.
            if accessor >= listlen:
               break
            nftp[slot] = nftplist[accessor]
         elif isinstance(accessor, str):
            # Then the key-value fields, if any, at which point
            # we convert nftplist to a dictionary.
            if kvt == False:
               nftplist = dict(zip(nftplist[kv_index:][0::2],
                               nftplist[kv_index:][1::2]))
               kvt = True
            nftp[slot] = nftplist.get(accessor)
         kv_index += 1
      return nftp

class Quotes(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .board
         .time
         .paper
         .bid
         .bid_depth
         .bid_depth_total
         .bid_number
         .offer
         .offer_depth
         .offer_depth_total
         .offer_number
         .open
         .high
         .low
         .last
         .change
         .change_percent
         .volume
         .value
         .trades
         .status
         .quote_id
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 1)
      else:
         super().__init__(nftplist, 1)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.board = self._nftp.get('board')
      self.time = self._nftp.get('time')
      self.paper = self._nftp.get('paper')
      self.bid = self._nftp.get('bid')
      self.bid_depth = self._nftp.get('bid-depth')
      self.bid_depth_total = self._nftp.get('bid-depth-total')
      self.bid_number = self._nftp.get('bid-number')
      self.offer = self._nftp.get('offer')
      self.offer_depth = self._nftp.get('offer-depth')
      self.offer_depth_total = self._nftp.get('offer-depth-total')
      self.offer_number = self._nftp.get('offer-number')
      self.open = self._nftp.get('open')
      self.high = self._nftp.get('high')
      self.low = self._nftp.get('low')
      self.last = self._nftp.get('last')
      self.change = self._nftp.get('change')
      self.change_percent = self._nftp.get('change-percent')
      self.volume = self._nftp.get('volume')
      self.value = self._nftp.get('value')
      self.trades = self._nftp.get('trades')
      self.status = self._nftp.get('status')
      self.quote_id = self._nftp.get('quote-id')

class Trade(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .board
         .time
         .paper
         .trade_time
         .quantity
         .price
         .source
         .buyer
         .seller
         .change_since_last
         .initiator
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 3)
      else:
         super().__init__(nftplist, 3)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.board = self._nftp.get('board')
      self.time = self._nftp.get('time')
      self.paper = self._nftp.get('paper')
      self.trade_time = self._nftp.get('trade-time')
      self.quantity = self._nftp.get('quantity')
      self.price = self._nftp.get('price')
      self.source = self._nftp.get('source')
      self.buyer = self._nftp.get('buyer')
      self.seller = self._nftp.get('seller')
      self.change_since_last = self._nftp.get('change-since-last')
      self.initiator = self._nftp.get('initiator')

class Extended_spread(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .time
         .paper
         .bid
         .bid_depth
         .bid_depth_total
         .offer
         .offer_depth
         .offer_depth_total
         .indexp
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 6)
      else:
         super().__init__(nftplist, 6)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.time = self._nftp.get('time')
      self.paper = self._nftp.get('paper')
      self.bid = self._nftp.get('bid')
      self.bid_depth = self._nftp.get('bid-depth')
      self.bid_depth_total = self._nftp.get('bid-depth-total')
      self.offer = self._nftp.get('offer')
      self.offer_depth = self._nftp.get('offer-depth')
      self.offer_depth_total = self._nftp.get('offer-depth-total')
      self.indexp = self._nftp.get('indexp')

class Security(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .time
         .paper
         .name
         .isin
         .lot
         .last_trade_date
         .prev_price
         .tradeable_size
         .currency
         .sectype
         .sector
         .primary_paper
         .primary_exchange
         .value_factor
         .status
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 20)
      else:
         super().__init__(nftplist, 20)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.time = self._nftp.get('time')
      self.paper = self._nftp.get('paper')
      self.name = self._nftp.get('name')
      self.isin = self._nftp.get('isin')
      self.lot = self._nftp.get('lot')
      self.last_trade_date = self._nftp.get('last-trade-date')
      self.prev_price = self._nftp.get('prev-price')
      self.tradeable_size = self._nftp.get('tradeable-size')
      self.currency = self._nftp.get('currency')
      self.sectype = self._nftp.get('sectype')
      self.sector = self._nftp.get('sector')
      self.primary_paper = self._nftp.get('primary-paper')
      self.primary_exchange = self._nftp.get('primary-exchange')
      self.value_factor = self._nftp.get('value-factor')
      self.status = self._nftp.get('status')

class Market_by_price(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .board
         .time
         .paper
         .bids
         .offers
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 22)
      else:
         super().__init__(nftplist, 22)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.board = self._nftp.get('board')
      self.time = self._nftp.get('time')
      self.paper = self._nftp.get('paper')
      self.bids = self._nftp.get('bids')
      self.offers = self._nftp.get('offers')

class Exchange(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .name
         .open_time
         .close_time
         .pretrade_time
         .posttrade_time
         .offset_from_oslo
         .allow_order_change
         .area
         .max_valid
         .max_valid_stop
         .next_trade_days
         .allow_stop_loss
         .allow_hidden
         .allow_direct_routing
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 24)
      else:
         super().__init__(nftplist, 24)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.name = self._nftp.get('name')
      self.open_time = self._nftp.get('open-time')
      self.close_time = self._nftp.get('close-time')
      self.pretrade_time = self._nftp.get('pretrade-time')
      self.posttrade_time = self._nftp.get('posttrade-time')
      self.offset_from_oslo = self._nftp.get('offset-from-oslo')
      self.allow_order_change = self._nftp.get('allow-order-change')
      self.area = self._nftp.get('area')
      self.max_valid = self._nftp.get('max-valid')
      self.max_valid_stop = self._nftp.get('max-valid-stop')
      self.next_trade_days = self._nftp.get('next-trade-days')
      self.allow_stop_loss = self._nftp.get('allow-stop-loss')
      self.allow_hidden = self._nftp.get('allow-hidden')
      self.allow_direct_routing = self._nftp.get('allow-direct-routing')

class Release(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .distributor
         .time
         .papers
         .exchanges
         .release_type
         .topic
         .id
         .received_time
         .published_time
         .company_name
         .country
         .city
         .isin
         .external_urls
         .company_url
         .heading
         .ingress
         .body
         .footer
         .copyright
         .category
         .format
         .language
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 25)
      else:
         super().__init__(nftplist, 25)
      self.sequence = self._nftp.get('sequence')
      self.distributor = self._nftp.get('distributor')
      self.time = self._nftp.get('time')
      self.papers = self._nftp.get('papers')
      self.exchanges = self._nftp.get('exchanges')
      self.release_type = self._nftp.get('release-type')
      self.topic = self._nftp.get('topic')
      self.id = self._nftp.get('id')
      self.received_time = self._nftp.get('received-time')
      self.published_time = self._nftp.get('published-time')
      self.company_name = self._nftp.get('company-name')
      self.country = self._nftp.get('country')
      self.city = self._nftp.get('city')
      self.isin = self._nftp.get('isin')
      self.external_urls = self._nftp.get('external-urls')
      self.company_url = self._nftp.get('company-url')
      self.heading = self._nftp.get('heading')
      self.ingress = self._nftp.get('ingress')
      self.body = self._nftp.get('body')
      self.footer = self._nftp.get('footer')
      self.copyright = self._nftp.get('copyright')
      self.category = self._nftp.get('category')
      self.format = self._nftp.get('format')
      self.language = self._nftp.get('language')

class History(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .date
         .paper
         .open
         .high
         .low
         .close
         .volume
         .value
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 27)
      else:
         super().__init__(nftplist, 27)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.date = self._nftp.get('date')
      self.paper = self._nftp.get('paper')
      self.open = self._nftp.get('open')
      self.high = self._nftp.get('high')
      self.low = self._nftp.get('low')
      self.close = self._nftp.get('close')
      self.volume = self._nftp.get('volume')
      self.value = self._nftp.get('value')

class Authorized(NFTPGenericClass):
   """This class defines the following slots:
         .yes_or_no
         .text
         .realtime
         .level
         .login_id
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 30)
      else:
         super().__init__(nftplist, 30)
      self.yes_or_no = self._nftp.get('yes-or-no')
      self.text = self._nftp.get('text')
      self.realtime = self._nftp.get('realtime')
      self.level = self._nftp.get('level')
      self.login_id = self._nftp.get('login-id')

class Exchange_state(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .time
         .date
         .state
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 48)
      else:
         super().__init__(nftplist, 48)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.time = self._nftp.get('time')
      self.date = self._nftp.get('date')
      self.state = self._nftp.get('state')

class Customer_order(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .do_odd_lotp
         .id
         .paper
         .order_type
         .order_number
         .order_limit
         .action_status
         .customer
         .filled_number
         .trigger_price
         .directp
         .status
         .hidden_number
         .exchange
         .order_time
         .valid_until
         .current_part
         .order_method
         .entered_by
         .exec_paper
         .exec_exchange
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 53)
      else:
         super().__init__(nftplist, 53)
      self.sequence = self._nftp.get('sequence')
      self.do_odd_lotp = self._nftp.get('do-odd-lotp')
      self.id = self._nftp.get('id')
      self.paper = self._nftp.get('paper')
      self.order_type = self._nftp.get('order-type')
      self.order_number = self._nftp.get('order-number')
      self.order_limit = self._nftp.get('order-limit')
      self.action_status = self._nftp.get('action-status')
      self.customer = self._nftp.get('customer')
      self.filled_number = self._nftp.get('filled-number')
      self.trigger_price = self._nftp.get('trigger-price')
      self.directp = self._nftp.get('directp')
      self.status = self._nftp.get('status')
      self.hidden_number = self._nftp.get('hidden-number')
      self.exchange = self._nftp.get('exchange')
      self.order_time = self._nftp.get('order-time')
      self.valid_until = self._nftp.get('valid-until')
      self.current_part = self._nftp.get('current-part')
      self.order_method = self._nftp.get('order-method')
      self.entered_by = self._nftp.get('entered-by')
      self.exec_paper = self._nftp.get('exec-paper')
      self.exec_exchange = self._nftp.get('exec-exchange')

class Customer_deal(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .deal_id
         .id
         .part
         .deal_number
         .deal_price
         .entry_time
         .notifiedp
         .customer
         .order_type
         .paper
         .exchange
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 54)
      else:
         super().__init__(nftplist, 54)
      self.sequence = self._nftp.get('sequence')
      self.deal_id = self._nftp.get('deal-id')
      self.id = self._nftp.get('id')
      self.part = self._nftp.get('part')
      self.deal_number = self._nftp.get('deal-number')
      self.deal_price = self._nftp.get('deal-price')
      self.entry_time = self._nftp.get('entry-time')
      self.notifiedp = self._nftp.get('notifiedp')
      self.customer = self._nftp.get('customer')
      self.order_type = self._nftp.get('order-type')
      self.paper = self._nftp.get('paper')
      self.exchange = self._nftp.get('exchange')

class Trader_available(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .customer
         .update_time
         .money
         .long_pos_value
         .short_pos_value
         .required_funds
         .net_available
         .active_buy_value
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 62)
      else:
         super().__init__(nftplist, 62)
      self.sequence = self._nftp.get('sequence')
      self.customer = self._nftp.get('customer')
      self.update_time = self._nftp.get('update_time')
      self.money = self._nftp.get('money')
      self.long_pos_value = self._nftp.get('long_pos_value')
      self.short_pos_value = self._nftp.get('short_pos_value')
      self.required_funds = self._nftp.get('required_funds')
      self.net_available = self._nftp.get('net_available')
      self.active_buy_value = self._nftp.get('active_buy_value')

class User_message(NFTPGenericClass):
   """This class defines the following slots:
         .message_type
         .message
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 70)
      else:
         super().__init__(nftplist, 70)
      self.message_type = self._nftp.get('message-type')
      self.message = self._nftp.get('message')

class Extended_paper_summary(NFTPGenericClass):
   """This class defines the following slots:
         .paper
         .last
         .change_percent
         .value
         .name
         .displayed_precision
         .bid
         .offer
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 82)
      else:
         super().__init__(nftplist, 82)
      self.paper = self._nftp.get('paper')
      self.last = self._nftp.get('last')
      self.change_percent = self._nftp.get('change-percent')
      self.value = self._nftp.get('value')
      self.name = self._nftp.get('name')
      self.displayed_precision = self._nftp.get('displayed-precision')
      self.bid = self._nftp.get('bid')
      self.offer = self._nftp.get('offer')

class Index_weight(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .time
         .paper
         .index_paper
         .index_exchange
         .weight
         .multiplier
         .price_adjustment
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 91)
      else:
         super().__init__(nftplist, 91)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.time = self._nftp.get('time')
      self.paper = self._nftp.get('paper')
      self.index_paper = self._nftp.get('index-paper')
      self.index_exchange = self._nftp.get('index-exchange')
      self.weight = self._nftp.get('weight')
      self.multiplier = self._nftp.get('multiplier')
      self.price_adjustment = self._nftp.get('price-adjustment')

class Errmsg(NFTPGenericClass):
   """This class defines the following slots:
         .err_class
         .err_text
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 99)
      else:
         super().__init__(nftplist, 99)
      self.err_class = self._nftp.get('err-class')
      self.err_text = self._nftp.get('err-text')

class Extended_security(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .time
         .paper
         .name
         .isin
         .lot
         .last_trade_date
         .prev_price
         .tradeable_size
         .currency
         .sectype
         .sector
         .existsp
         .tradeablep
         .primary_paper
         .primary_exchange
         .secondaries
         .value_factor
         .url
         .issuer
         .expiration_date
         .status
         .min_trade_value
         .last_update_date
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 120)
      else:
         super().__init__(nftplist, 120)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.time = self._nftp.get('time')
      self.paper = self._nftp.get('paper')
      self.name = self._nftp.get('name')
      self.isin = self._nftp.get('isin')
      self.lot = self._nftp.get('lot')
      self.last_trade_date = self._nftp.get('last-trade-date')
      self.prev_price = self._nftp.get('prev-price')
      self.tradeable_size = self._nftp.get('tradeable-size')
      self.currency = self._nftp.get('currency')
      self.sectype = self._nftp.get('sectype')
      self.sector = self._nftp.get('sector')
      self.existsp = self._nftp.get('existsp')
      self.tradeablep = self._nftp.get('tradeablep')
      self.primary_paper = self._nftp.get('primary-paper')
      self.primary_exchange = self._nftp.get('primary-exchange')
      self.secondaries = self._nftp.get('secondaries')
      self.value_factor = self._nftp.get('value-factor')
      self.url = self._nftp.get('url')
      self.issuer = self._nftp.get('issuer')
      self.expiration_date = self._nftp.get('expiration-date')
      self.status = self._nftp.get('status')
      self.min_trade_value = self._nftp.get('min-trade-value')
      self.last_update_date = self._nftp.get('last-update-date')

class Fund(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .paper
         .fund_manager_id
         .fund_manager_name
         .root_group
         .fund_type
         .fund_area
         .benchmark
         .max_sales_charge
         .max_redemption_fee
         .management_fee
         .min_amount
         .min_amount_currency
         .vff_classified_p
         .credit_risk_p
         .currency_risk_p
         .max_interest_rate_risk
         .min_interest_rate_risk
         .hyield
         .modified_duration
         .profit_share_p
         .total_cost_percent_unshared
         .total_cost_percent_shared
         .total_cost_date
         .returns
         .return_years
         .average_returns
         .annualized_returns
         .volatilities
         .sharpe_ratios
         .differential_returns
         .relative_volatilities
         .information_ratios
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 126)
      else:
         super().__init__(nftplist, 126)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.paper = self._nftp.get('paper')
      self.fund_manager_id = self._nftp.get('fund-manager-id')
      self.fund_manager_name = self._nftp.get('fund-manager-name')
      self.root_group = self._nftp.get('root-group')
      self.fund_type = self._nftp.get('fund-type')
      self.fund_area = self._nftp.get('fund-area')
      self.benchmark = self._nftp.get('benchmark')
      self.max_sales_charge = self._nftp.get('max-sales-charge')
      self.max_redemption_fee = self._nftp.get('max-redemption-fee')
      self.management_fee = self._nftp.get('management-fee')
      self.min_amount = self._nftp.get('min-amount')
      self.min_amount_currency = self._nftp.get('min-amount-currency')
      self.vff_classified_p = self._nftp.get('vff-classified-p')
      self.credit_risk_p = self._nftp.get('credit-risk-p')
      self.currency_risk_p = self._nftp.get('currency-risk-p')
      self.max_interest_rate_risk = self._nftp.get('max-interest-rate-risk')
      self.min_interest_rate_risk = self._nftp.get('min-interest-rate-risk')
      self.hyield = self._nftp.get('yield')
      self.modified_duration = self._nftp.get('modified-duration')
      self.profit_share_p = self._nftp.get('profit-share-p')
      self.total_cost_percent_unshared = self._nftp.get('total-cost-percent-unshared')
      self.total_cost_percent_shared = self._nftp.get('total-cost-percent-shared')
      self.total_cost_date = self._nftp.get('total-cost-date')
      self.returns = self._nftp.get('returns')
      self.return_years = self._nftp.get('return-years')
      self.average_returns = self._nftp.get('average-returns')
      self.annualized_returns = self._nftp.get('annualized-returns')
      self.volatilities = self._nftp.get('volatilities')
      self.sharpe_ratios = self._nftp.get('sharpe-ratios')
      self.differential_returns = self._nftp.get('differential-returns')
      self.relative_volatilities = self._nftp.get('relative-volatilities')
      self.information_ratios = self._nftp.get('information-ratios')

class Extended_available(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .customer
         .active_buys
         .active_buy_value
         .allow_stop_loss
         .active_sells
         .borrowed
         .counting_active_buy_value
         .cust_curr
         .curr_rate
         .concentration_rf
         .done_buys
         .done_buy_value
         .done_sells
         .done_sell_value
         .exch_name
         .full_name
         .futures_realized
         .futures_value
         .intraday_credit
         .in_portfolio
         .limit
         .lent
         .locked
         .lk_money
         .lot
         .long_pos_value
         .money
         .max_buy
         .max_buy_credit_val
         .max_buy_lot
         .max_buy_val
         .max_credit
         .min_invisible
         .max_sell
         .max_sell_long
         .max_sell_short
         .needs_available
         .net_available
         .paper_currency
         .paper_factor
         .prev_share_value
         .required_funds
         .rf_factor
         .req_funds_p
         .paper
         .exchange
         .sum_futures_realized
         .sec_name
         .short_pos_value
         .total_share_value
         .time
         .user_type
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 131)
      else:
         super().__init__(nftplist, 131)
      self.sequence = self._nftp.get('sequence')
      self.customer = self._nftp.get('customer')
      self.active_buys = self._nftp.get('active-buys')
      self.active_buy_value = self._nftp.get('active-buy-value')
      self.allow_stop_loss = self._nftp.get('allow-stop-loss')
      self.active_sells = self._nftp.get('active-sells')
      self.borrowed = self._nftp.get('borrowed')
      self.counting_active_buy_value = self._nftp.get('counting-active-buy-value')
      self.cust_curr = self._nftp.get('cust-curr')
      self.curr_rate = self._nftp.get('curr-rate')
      self.concentration_rf = self._nftp.get('concentration-rf')
      self.done_buys = self._nftp.get('done-buys')
      self.done_buy_value = self._nftp.get('done-buy-value')
      self.done_sells = self._nftp.get('done-sells')
      self.done_sell_value = self._nftp.get('done-sell-value')
      self.exch_name = self._nftp.get('exch-name')
      self.full_name = self._nftp.get('full-name')
      self.futures_realized = self._nftp.get('futures-realized')
      self.futures_value = self._nftp.get('futures-value')
      self.intraday_credit = self._nftp.get('intraday-credit')
      self.in_portfolio = self._nftp.get('in-portfolio')
      self.limit = self._nftp.get('limit')
      self.lent = self._nftp.get('lent')
      self.locked = self._nftp.get('locked')
      self.lk_money = self._nftp.get('lk-money')
      self.lot = self._nftp.get('lot')
      self.long_pos_value = self._nftp.get('long-pos-value')
      self.money = self._nftp.get('money')
      self.max_buy = self._nftp.get('max-buy')
      self.max_buy_credit_val = self._nftp.get('max-buy-credit-val')
      self.max_buy_lot = self._nftp.get('max-buy-lot')
      self.max_buy_val = self._nftp.get('max-buy-val')
      self.max_credit = self._nftp.get('max-credit')
      self.min_invisible = self._nftp.get('min-invisible')
      self.max_sell = self._nftp.get('max-sell')
      self.max_sell_long = self._nftp.get('max-sell-long')
      self.max_sell_short = self._nftp.get('max-sell-short')
      self.needs_available = self._nftp.get('needs-available')
      self.net_available = self._nftp.get('net-available')
      self.paper_currency = self._nftp.get('paper-currency')
      self.paper_factor = self._nftp.get('paper-factor')
      self.prev_share_value = self._nftp.get('prev-share-value')
      self.required_funds = self._nftp.get('required-funds')
      self.rf_factor = self._nftp.get('rf-factor')
      self.req_funds_p = self._nftp.get('req-funds-%')
      self.paper = self._nftp.get('paper')
      self.exchange = self._nftp.get('exchange')
      self.sum_futures_realized = self._nftp.get('sum-futures-realized')
      self.sec_name = self._nftp.get('sec-name')
      self.short_pos_value = self._nftp.get('short-pos-value')
      self.total_share_value = self._nftp.get('total-share-value')
      self.time = self._nftp.get('time')
      self.user_type = self._nftp.get('user-type')

class Heartbeat(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .date
         .time
         .message
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 135)
      else:
         super().__init__(nftplist, 135)
      self.sequence = self._nftp.get('sequence')
      self.date = self._nftp.get('date')
      self.time = self._nftp.get('time')
      self.message = self._nftp.get('message')

class Trade_information(NFTPGenericClass):
   """This class defines the following slots:
         .sequence
         .exchange
         .board
         .time
         .paper
         .trade_time
         .quantity
         .price
         .buyer
         .seller
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 146)
      else:
         super().__init__(nftplist, 146)
      self.sequence = self._nftp.get('sequence')
      self.exchange = self._nftp.get('exchange')
      self.board = self._nftp.get('board')
      self.time = self._nftp.get('time')
      self.paper = self._nftp.get('paper')
      self.trade_time = self._nftp.get('trade-time')
      self.quantity = self._nftp.get('quantity')
      self.price = self._nftp.get('price')
      self.buyer = self._nftp.get('buyer')
      self.seller = self._nftp.get('seller')

class Api_response(NFTPGenericClass):
   """This class defines the following slots:
         .id
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 193)
      else:
         super().__init__(nftplist, 193)
      self.id = self._nftp.get('id')

class Api_order_entry(NFTPGenericClass):
   """This class defines the following slots:
         .odd_lot_id
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 194)
      else:
         super().__init__(nftplist, 194)
      self.odd_lot_id = self._nftp.get('odd-lot-id')

class Api_order_change(NFTPGenericClass):
   """This class defines the following slots:
         .status
         .partial
         .remaining
         .done
         .limit
         .volume
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 195)
      else:
         super().__init__(nftplist, 195)
      self.status = self._nftp.get('status')
      self.partial = self._nftp.get('partial')
      self.remaining = self._nftp.get('remaining')
      self.done = self._nftp.get('done')
      self.limit = self._nftp.get('limit')
      self.volume = self._nftp.get('volume')

class Pool_content(NFTPGenericClass):
   """This class defines the following slots:
         .exchange
         .paper
         .quantity
   """
   def __init__(self, nftplist):
      if _PY2_:
         NFTPGenericClass.__init__(self, nftplist, 311)
      else:
         super().__init__(nftplist, 311)
      self.exchange = self._nftp.get('exchange')
      self.paper = self._nftp.get('paper')
      self.quantity = self._nftp.get('quantity')

nftp_classes = {  1 : Quotes,
                  3 : Trade,
                  6 : Extended_spread,
                 20 : Security,
                 22 : Market_by_price,
                 24 : Exchange,
                 25 : Release,
                 27 : History,
                 30 : Authorized,
                 48 : Exchange_state,
                 53 : Customer_order,
                 54 : Customer_deal,
                 62 : Trader_available,
                 70 : User_message,
                 82 : Extended_paper_summary,
                 91 : Index_weight,
                 99 : Errmsg,
                120 : Extended_security,
                126 : Fund,
                131 : Extended_available,
                135 : Heartbeat,
                146 : Trade_information,
                193 : Api_response,
                194 : Api_order_entry,
                195 : Api_order_change,
                311 : Pool_content}

def makeNFTP(nftplist):
   obj = nftp_classes[nftplist[2]]
   return obj(nftplist)
